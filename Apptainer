# Stage 1: Compile the planner
Bootstrap: docker
From: ubuntu:22.04
Stage: build

%files
    . /planner

%post
    ## Install all necessary dependencies.
    apt-get update
    apt-get -y install --no-install-recommends cmake g++ make pypy3

    ## Clear build directory.
    rm -rf /planner/builds

    ## Build planner.
    cd /planner
    pypy3 build.py

    strip --strip-all /planner/builds/release/bin/downward

# Stage 2: Run the planner
Bootstrap: docker
From: ubuntu:22.04
Stage: run

%files from build
    /planner/driver
    /planner/fast-downward.py
    /planner/builds/release/bin

%post
    apt-get update
    apt-get -y install --no-install-recommends pypy3
    rm -rf /var/lib/apt/lists/*

# The runscript is called whenever the container is used to solve an instance.
%runscript
    DOMAINFILE="$1"
    PROBLEMFILE="$2"
    PLANFILE="$3"

    pypy3 /planner/fast-downward.py \
        --plan-file "$PLANFILE" \
        --overall-time-limit 30m \
        "$DOMAINFILE" \
        "$PROBLEMFILE" \
        --search \
        "astar(scp([projections(hillclimbing(max_time=100)), projections(systematic(2)), cartesian(), projections(multiple_cegar(total_max_time=100, max_pdb_size=10k, max_collection_size=1M, stagnation_limit=20, blacklist_trigger_percentage=0, verbosity=normal)), domain_abstractions(multiple_domain_abstractions_cegar(flaw_treatment=random_single_atom, max_abstraction_size=10k, max_collection_size=1M, init_split_quantity=single, init_split_candidates=goals, init_split_method=identity, blacklist_trigger_percentage=0, verbosity=normal))], max_orders=infinity, max_optimization_time=2, diversify=true, max_time=200, orders=greedy_orders(scoring_function=max_heuristic_per_stolen_costs)))"

# Define meta data
%labels
Name        CEGAR PDBs and Domain Abstractions
Description Pattern Databases for interesting patterns up to size 2, patterns computed with hill climbing and CEGAR, combined with domain abstractions and Cartesian abstractions computed with CEGAR in a maximum heuristic over SCP heuristics, generated through greedy computation of hybrid-optimized orders.
Authors     Raphael Kreft <r.kreft@unibas.ch> Clemens BÃ¼chner <clemens.buechner@unibas.ch>, Silvan Sievers <silvan.sievers@unibas.ch>
License     GPL 3
Tracks      optimal
SupportsDerivedPredicates                       no
SupportsUniversallyQuantifiedPreconditions      yes
SupportsExistentiallyQuantifiedPreconditions    yes
SupportsUniversallyQuantifiedEffects            yes
SupportsNegativePreconditions                   yes
SupportsEqualityPreconditions                   yes
SupportsInequalityPreconditions                 yes
SupportsConditionalEffects                      yes
SupportsImplyPreconditions                      yes
